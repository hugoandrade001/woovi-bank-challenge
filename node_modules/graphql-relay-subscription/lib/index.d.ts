import { GraphQLInputFieldConfig } from 'graphql';
import type { GraphQLFieldConfig, GraphQLResolveInfo, ThunkObjMap } from 'graphql';
export interface InputArgs<TInput> {
    input: TInput & {
        clientSubscriptionId?: string | null | undefined;
    };
}
export interface SubscriptionConfig<TSource, TContext, TInput> extends Omit<GraphQLFieldConfig<TSource, TContext, InputArgs<TInput>>, 'type' | 'args' | 'subscribe' | 'resolve'> {
    name: string;
    inputFields?: ThunkObjMap<GraphQLInputFieldConfig>;
    outputFields?: ThunkObjMap<GraphQLFieldConfig<TSource, TContext>>;
    subscribe?: (input: TInput, context: TContext, info: GraphQLResolveInfo) => any;
    getPayload?: (obj: TSource, input: TInput, context: TContext, info: GraphQLResolveInfo) => Promise<any> | any;
}
export declare function subscriptionWithClientId<TSource = any, TContext = any, TInput = {
    [inputName: string]: any;
}>({ name, inputFields, outputFields, subscribe, getPayload, ...config }: SubscriptionConfig<TSource, TContext, TInput>): GraphQLFieldConfig<TSource, TContext, InputArgs<TInput>>;
