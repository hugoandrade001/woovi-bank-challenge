import { Types } from 'mongoose';
export declare type DataLoaderKey = string | Types.ObjectId;
export declare type BuiltConditionSet = {
    conditions: any;
    pipeline: any[];
};
export declare type FilterMapping<TValue = any> = {
    [key: string]: FilterFieldMapping<TValue>;
};
export interface FilterFieldMappingMatch<ValueT = any> {
    type: 'MATCH_1_TO_1';
    key?: string;
    format?: (value: ValueT) => any;
}
export interface FilterFieldMappingCustom<ValueT = any> {
    type: 'CUSTOM_CONDITION';
    format: (value: ValueT) => Object;
}
export interface FilterFieldMappingPipeline<ValueT = any> {
    type: 'AGGREGATE_PIPELINE';
    pipeline: Object[] | ((arg: ValueT) => Object[]);
}
export declare type FilterFieldMapping<ValueT> = FilterFieldMappingMatch<ValueT> | FilterFieldMappingCustom<ValueT> | FilterFieldMappingPipeline<ValueT> | boolean;
export interface GraphQLFilterItem {
    [filterKey: string]: any;
}
export interface GraphQLFilter extends GraphQLFilterItem {
    OR?: GraphQLFilter[];
    AND?: GraphQLFilter[];
}
export interface GraphQLArgFilter {
    filter: GraphQLFilter;
}
export declare type SortDirection = number;
export interface GraphqlSortArg<SortFieldT extends string> {
    field: SortFieldT;
    direction: SortDirection;
}
export declare type LoaderFn<Context extends object> = (ctx: Context, id: DataLoaderKey) => any;
