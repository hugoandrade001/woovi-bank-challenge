import DataLoader from 'dataloader';
import { ConnectionArguments } from 'graphql-relay';
import { Model, Document } from 'mongoose';
import { DataLoaderKey, GraphQLFilter } from './types';
export interface BaseContext<LoaderName extends string, Value extends Document> {
    dataloaders: Record<LoaderName, DataLoader<string, Value>>;
}
declare type filtersConditionsOrSortFn<Context> = (context: Context, args: FilteredConnectionArguments) => object;
export declare type CreateLoaderArgs<Context extends BaseContext<LoaderName, Value>, LoaderName extends string, Value extends Document> = {
    model: Model<Value>;
    viewerCanSee?: (context: Context, data: Value) => Value | Promise<Value>;
    loaderName: LoaderName;
    filterMapping?: object;
    isAggregate?: boolean;
    shouldValidateContextUser?: boolean;
    defaultFilters?: object | filtersConditionsOrSortFn<Context>;
    defaultConditions?: object | filtersConditionsOrSortFn<Context>;
    defaultSort?: object | filtersConditionsOrSortFn<Context>;
};
export interface FilteredConnectionArguments extends ConnectionArguments {
    filters: GraphQLFilter | null;
}
export declare const createLoader: <Context extends BaseContext<LoaderName, Value>, LoaderName extends string, Value extends Document<any, any, any>>({ model, viewerCanSee, loaderName, filterMapping, isAggregate, shouldValidateContextUser, defaultFilters, defaultConditions, defaultSort, }: CreateLoaderArgs<Context, LoaderName, Value>) => {
    Wrapper: new (value: Value) => Value;
    getLoader: () => DataLoader<string, Value, string>;
    clearCache: ({ dataloaders }: Context, id: string) => Record<LoaderName, DataLoader<string, Value, string>>[LoaderName];
    primeCache: ({ dataloaders }: Context, id: string, data: Value) => Record<LoaderName, DataLoader<string, Value, string>>[LoaderName];
    clearAndPrimeCache: (context: Context, id: string, data: Value) => Record<LoaderName, DataLoader<string, Value, string>>[LoaderName];
    load: (context: Context, id: DataLoaderKey) => Promise<Value | null>;
    loadAll: ((...params: any[]) => void | import("./NullConnection").NullConnectionType) | ((...params: any[]) => Promise<{
        edges: {
            cursor: string;
            node: unknown;
        }[];
        count: number;
        endCursorOffset: number;
        startCursorOffset: number;
        pageInfo: {
            startCursor: string | null;
            endCursor: string | null;
            hasPreviousPage: boolean;
            hasNextPage: boolean;
        };
    }>);
};
export {};
